//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub created_at: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::profile_has_user::Entity")]
    ProfileHasUser,
    #[sea_orm(has_many = "super::user_has_role::Entity")]
    UserHasRole,
}

impl Related<super::profile_has_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProfileHasUser.def()
    }
}

impl Related<super::user_has_role::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserHasRole.def()
    }
}

impl Related<super::profiles::Entity> for Entity {
    fn to() -> RelationDef {
        super::profile_has_user::Relation::Profiles.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::profile_has_user::Relation::Users.def().rev())
    }
}

impl Related<super::roles::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_has_role::Relation::Roles.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_has_role::Relation::Users.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
